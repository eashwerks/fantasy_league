# Generated by Django 3.0.6 on 2020-05-13 07:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=32, unique=True)),
                ('phone_number', models.CharField(max_length=24)),
                ('first_name', models.CharField(max_length=32)),
                ('last_name', models.CharField(blank=True, max_length=32, null=True)),
                ('dp', models.FileField(blank=True, null=True, upload_to='profile_picture')),
                ('allocated_points', models.IntegerField(default=120)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IPLTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('image', models.ImageField(upload_to='team_images/')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=32)),
                ('last_name', models.CharField(blank=True, max_length=32, null=True)),
                ('category', model_utils.fields.StatusField(choices=[('BATSMEN', 'BATSMEN'), ('BOWLERS', 'BOWLERS'), ('WICKET_KEEPERS', 'WICKET_KEEPERS'), ('ALL_ROUNDERS', 'ALL_ROUNDERS')], default='BATSMEN', max_length=100, no_check_for_status=True)),
                ('is_capped', models.BooleanField(default=False)),
                ('is_team_active', models.BooleanField(default=False)),
                ('dp', models.ImageField(blank=True, null=True, upload_to='player_images')),
                ('points', models.IntegerField(default=0)),
                ('ipl_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_0.IPLTeam')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamPlayerMappings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_players', to='app_0.Player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_players', to='app_0.Team')),
            ],
            options={
                'default_related_name': 'team_players',
            },
        ),
    ]
